# Database for the records specific to the aravis GigE driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

# This associates a BOY screen with the template
# % gui, $(PORT), boydetail, aravisGigEApp_opi/aravis_detail.opi, P=$(P), R=$(R), DESC=Camera
# % gui, $(PORT), boyembed, aravisGigEApp_opi/aravis_embed_box.opi, P=$(P), R=$(R), DESC=Camera
# % gui, $(PORT), boyembed, aravisGigEApp_opi/aravis_embed.opi, P=$(P), R=$(R), DESC=Camera

# These define what PVs a motor detail screen should contain
# ADBase things
# Info
# % gui, $(PORT), readback, Port name,   $(P)$(R)PortName_RBV
# % gui, $(PORT), readback, Manufacturer,   $(P)$(R)Manufacturer_RBV
# % gui, $(PORT), readback, Model,   $(P)$(R)Model_RBV
# % gui, $(PORT), readback, Detector state,   $(P)$(R)DetectorState_RBV
# % gui, $(PORT), readback, Status message,   $(P)$(R)StatusMessage_RBV
# Image
# % gui, $(PORT), enum, Data type,   $(P)$(R)DataType
# % gui, $(PORT), readback, Data type,   $(P)$(R)DataType_RBV
# % gui, $(PORT), enum, Colour mode,   $(P)$(R)ColorMode
# % gui, $(PORT), readback, Colour mode,   $(P)$(R)ColorMode_RBV
# % gui, $(PORT), demand, Gain,   $(P)$(R)Gain
# % gui, $(PORT), readback, Gain,   $(P)$(R)Gain_RBV
# % gui, $(PORT), readback, Max size X,   $(P)$(R)MaxSizeX_RBV
# % gui, $(PORT), readback, Max size Y,   $(P)$(R)MaxSizeY_RBV
# % gui, $(PORT), demand, Binning X,   $(P)$(R)BinX
# % gui, $(PORT), readback, Binning X,   $(P)$(R)BinX_RBV
# % gui, $(PORT), demand, Binning Y,   $(P)$(R)BinY
# % gui, $(PORT), readback, Binning Y,   $(P)$(R)BinY_RBV
# % gui, $(PORT), demand, Region start X,   $(P)$(R)MinX
# % gui, $(PORT), readback, Region start X,   $(P)$(R)MinX_RBV
# % gui, $(PORT), demand, Region start Y,   $(P)$(R)MinY
# % gui, $(PORT), readback, Region start Y,   $(P)$(R)MinY_RBV
# % gui, $(PORT), demand, Region size X,   $(P)$(R)SizeX
# % gui, $(PORT), readback, Region size X,   $(P)$(R)SizeX_RBV
# % gui, $(PORT), demand, Region size Y,   $(P)$(R)SizeY
# % gui, $(PORT), readback, Region size Y,   $(P)$(R)SizeY_RBV
# % gui, $(PORT), readback, Array Size X,   $(P)$(R)ArraySizeX_RBV
# % gui, $(PORT), readback, Array Size Y,   $(P)$(R)ArraySizeY_RBV
# % gui, $(PORT), readback, Array Size,   $(P)$(R)ArraySize_RBV
# Acquisition
# % gui, $(PORT), demand, Acquire time,   $(P)$(R)AcquireTime
# % gui, $(PORT), readback, Acquire time,   $(P)$(R)AcquireTime_RBV
# % gui, $(PORT), demand, Acquire period,   $(P)$(R)AcquirePeriod
# % gui, $(PORT), readback, Acquire period,   $(P)$(R)AcquirePeriod_RBV
# % gui, $(PORT), readback, Time remaining,   $(P)$(R)TimeRemaining_RBV
# % gui, $(PORT), enum, Frame type,   $(P)$(R)FrameType
# % gui, $(PORT), readback, Frame type,   $(P)$(R)FrameType_RBV
# % gui, $(PORT), enum, Image mode,   $(P)$(R)ImageMode
# % gui, $(PORT), readback, Image mode,   $(P)$(R)ImageMode_RBV
# % gui, $(PORT), demand, Num images,   $(P)$(R)NumImages
# % gui, $(PORT), readback, Num images,   $(P)$(R)NumImages_RBV
# % gui, $(PORT), readback, Image counter,   $(P)$(R)NumImagesCounter_RBV
# % gui, $(PORT), enum, Acquire,   $(P)$(R)Acquire
# % gui, $(PORT), readback, Acquire,   $(P)$(R)Acquire_RBV
# % gui, $(PORT), demand, Array counter,   $(P)$(R)ArrayCounter
# % gui, $(PORT), readback, Array counter,   $(P)$(R)ArrayCounter_RBV
# % gui, $(PORT), readback, Array rate,   $(P)$(R)ArrayRate_RBV
# % gui, $(PORT), enum, Array callbacks,   $(P)$(R)ArrayCallbacks
# % gui, $(PORT), readback, Array callbacks,   $(P)$(R)ArrayCallbacks_RBV
# % gui, $(PORT), demand, Attributes file,   $(P)$(R)NDAttributesFile
# Temperature
# % gui, $(PORT), enum, Shutter mode,   $(P)$(R)ShutterMode
# % gui, $(PORT), readback, Shutter mode,   $(P)$(R)ShutterMode_RBV
# % gui, $(PORT), enum, Shutter control,   $(P)$(R)ShutterControl
# % gui, $(PORT), readback, Shutter control,   $(P)$(R)ShutterControl_RBV
# % gui, $(PORT), readback, Shutter status,   $(P)$(R)ShutterStatus_RBV
# % gui, $(PORT), demand, Shutter open delay,   $(P)$(R)ShutterOpenDelay
# % gui, $(PORT), readback, Shutter open delay,   $(P)$(R)ShutterOpenDelay_RBV
# % gui, $(PORT), demand, Shutter close delay,   $(P)$(R)ShutterCloseDelay
# % gui, $(PORT), readback, Shutter close delay,   $(P)$(R)ShutterCloseDelay_RBV
# % gui, $(PORT), demand, Temperature setpoint,   $(P)$(R)Temperature
# % gui, $(PORT), readback, Temperature setpoint,   $(P)$(R)Temperature_RBV
# % gui, $(PORT), readback, Current temperature,   $(P)$(R)Temperature_RBV
# Memory
# % gui, $(PORT), readback, Max memory,   $(P)$(R)PoolMaxMem
# % gui, $(PORT), readback, Max buffers,   $(P)$(R)PoolMaxBuffers
# % gui, $(PORT), readback, Used memory,   $(P)$(R)PoolUsedMem
# % gui, $(PORT), readback, Allocated buffers,   $(P)$(R)PoolAllocBuffers
# % gui, $(PORT), readback, Free buffers,   $(P)$(R)PoolFreeBuffers
# % gui, $(PORT), readback, Used buffers,   $(P)$(R)PoolUsedBuffers
# AravisCamera things
# % gui, $(PORT), enum, Get features, $(P)$(R)GETFEATURES
# % gui, $(PORT), readback, Get features, $(P)$(R)GETFEATURES_RBV
# % gui, $(PORT), readback, Completed frames, $(P)$(R)COMPLETED_RBV
# % gui, $(PORT), readback, Failed frames, $(P)$(R)FAILURES_RBV
# % gui, $(PORT), readback, Underrun frames, $(P)$(R)UNDERRUNS_RBV
# % gui, $(PORT), command, Reconnect,  $(P)$(R)RESET

include "ADBase.template"

# All tags starting with gdatag are DLS specific for GDA
# % gdatag, template, aravisCamera, $(PORT)_aravisCamera, $(PORT) aravisCamera class instance

# Only 2 data types are supported, unsigned 8 and 16 bit integers
record(mbbo, "$(P)$(R)DataType")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)DataType_RBV")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

# Redefine the color mode choices from ADBase.template to only have those that the aravisCamera
# driver supports.  Keep the same values (xxVL), but change the menu numbers.

# Only Mono, Bayer and RGB1 color modes are supported at this time
record(mbbo, "$(P)$(R)ColorMode")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)ColorMode_RBV")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}


# % gdatag, pv, ro, $(PORT)_aravisCamera, COMPLETED_RBV, Readback for Frames Completed
record(ai, "$(P)$(R)COMPLETED_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_COMPLETED")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC LLSV LOLO LOW LSV")
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, FAILURES_RBV, Readback for Frame Failures
record(ai, "$(P)$(R)FAILURES_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_FAILURES")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, UNDERRUNS_RBV, Readback for Frame Underruns
record(ai, "$(P)$(R)UNDERRUNS_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_UNDERRUNS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, MISSING_PKTS_RBV, Readback for Missing Packet count
record(longin, "$(P)$(R)MISSING_PKTS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_MISSING_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

# % gdatag, pv, ro, $(PORT)_aravisCamera, RESENT_PKTS_RBV, Readback for Resent Packet count
record(longin, "$(P)$(R)RESENT_PKTS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_RESENT_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(mbbo, "$(P)$(R)PKT_RESEND")
{
   field(DESC, "Packet resend enable")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_PKT_RESEND")
   field(ZRST, "Never")
   field(ZRVL, "0")
   field(ONST, "Always")
   field(ONVL, "1")
   field(VAL,  "1")
   field(PINI, "1")
   info(autosaveFields, "DESC ONSV ZRSV PINI VAL")
}

record(longout, "$(P)$(R)PKT_TIMEOUT")
{
   field(DESC, "Delay in us before packet resend request")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_PKT_TIMEOUT")
   field(VAL,  "20000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "$(P)$(R)FRAME_RETENTION")
{
   field(DESC, "Frame timeout in us after last packet")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_FRAME_RETENTION")
   field(VAL,  "100000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "$(P)$(R)RESET")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_RESET")
   field(FLNK, "$(P)$(R)CONNECTION")
}

record(bi, "$(P)$(R)GETFEATURES_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_GETFEATURES")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
}

record(bo, "$(P)$(R)GETFEATURES") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_GETFEATURES")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(VAL,  "1")
  field(PINI, "YES")
  info(autosaveFields, "DESC VAL")
}

record(longout, "$(P)$(R)CONNECTION")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_CONNECTION")
   field(VAL, "1")
   field(PINI, "1")
}

record(calcout, "$(P)$(R)CHKCONN")
{
   field(SCAN, "1 second")
   field(INPA, "$(P)$(R)CONNECTION.SEVR CP")
   field(CALC, "A==0")
   field(OOPT, "When Non-zero")
   field(OUT,  "$(P)$(R)CONNECTION.PROC PP")
}

record(mbbi, "$(P)$(R)LEFTSHIFT_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_LEFTSHIFT")
  field(ZRST, "No")
  field(ZRVL, "0")
  field(ONST, "Yes")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## If this is set to 1, then 10, 12 and 16 bit images will be left shifted 
## so that a pixel with maximum exposure = 2^16 no matter what the pixel format 
record(mbbo, "$(P)$(R)LEFTSHIFT") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_LEFTSHIFT")
  field(ZRST, "No")
  field(ZRVL, "0")
  field(ONST, "Yes")
  field(ONVL, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(bi, "$(P)$(R)HWIMAGEMODE_RBV") {
  field(DESC, "Use HW register for acquisiton modes")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_HWIMAGEMODE")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZSV OSV")
}

## If this is set to 1, the acquisition mode is communicated to the
## hardware, on zero a software based implementation is used
record(bo, "$(P)$(R)HWIMAGEMODE") {
  field(DESC, "Use HW register for image modes")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_HWIMAGEMODE")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  info(autosaveFields, "DESC ZSV OSV VAL")
}

# unsupported fields
record(bo, "$(P)$(R)ReverseX") {
  field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY") {
  field(DISA, "1")
}
record(longout, "$(P)$(R)NumExposures") {
  field(DISA, "1")
}  
record(longin, "$(P)$(R)NumExposures_RBV") {
  field(DISA, "1")
}  
record(longin, "$(P)$(R)NumExposuresCounter_RBV") {
  field(DISA, "1")
}
record(mbbo, "$(P)$(R)TriggerMode") {
  field(DISA, "1")
}
